/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        ListNode dummy=new ListNode();
        dummy.next=head;
        ListNode curr1=dummy;
        ListNode prev1=null;
        
        //moving current pointer to the start from wherewe need to reverse and moving previous pointer to a node before that
        for(int i=0;i<left;i++)
        {
            prev1=curr1;
            curr1=curr1.next;
        }
        
        //Reversing the list
        ListNode curr2=curr1;
        ListNode prev2=prev1;
        ListNode next=null;
        for(int i=left;i<=right;i++)
        {
            next=curr2.next;
            curr2.next=prev2;
            prev2=curr2;
            curr2=next;
        }
        
        //reconnecting the before end after of the list
        prev1.next=prev2;
        curr1.next=curr2;
        
        return dummy.next;
    }
}
